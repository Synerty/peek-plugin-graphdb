"""initial

Peek Plugin Database Migration Script

Revision ID: 0ea4344caa57
Revises: 
Create Date: 2017-08-22 12:55:15.979935

"""

# revision identifiers, used by Alembic.
from sqlalchemy import Sequence
from sqlalchemy.dialects.mssql.base import MSDialect
from sqlalchemy.dialects.postgresql.base import PGDialect
from sqlalchemy.sql.ddl import CreateSequence

revision = '0ea4344caa57'
down_revision = None
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa


def isMssqlDialect():
    return isinstance(op.get_bind().engine.dialect, MSDialect)


def isPostGreSQLDialect():
    return isinstance(op.get_bind().engine.dialect, PGDialect)


def nextval(seqName):
    if isMssqlDialect():
        return sa.text('(NEXT VALUE FOR "pl_graphdb"."%s")' % seqName)

    return sa.text('nextval(\'pl_graphdb."%s"\')' % seqName)


def upgrade():
    op.execute(
        CreateSequence(Sequence('GraphDbVertex_id_seq', minvalue=0, schema='pl_graphdb')))
    op.execute(
        CreateSequence(Sequence('GraphDbEdge_id_seq', minvalue=0, schema='pl_graphdb')))

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('GraphDbModelSet',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('key', sa.String(length=50), nullable=False),
                    sa.Column('name', sa.String(length=50), nullable=False),
                    sa.Column('comment', sa.String(), nullable=True),
                    sa.Column('propsJson', sa.String(length=500), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name'),
                    schema='pl_graphdb'
                    )
    op.create_table('Setting',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(length=50), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    schema='pl_graphdb'
                    )
    op.create_table('GraphDbVertex',
                    sa.Column('id', sa.Integer(),
                              server_default=nextval("GraphDbVertex_id_seq"),
                              autoincrement=False, nullable=False),
                    sa.Column('modelSetId', sa.Integer(), nullable=False),
                    sa.Column('key', sa.String(length=50), nullable=False),
                    sa.Column('name', sa.String(length=50), nullable=False),
                    sa.Column('desc', sa.String(length=200), nullable=True),
                    sa.Column('propsJson', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['modelSetId'],
                                            ['pl_graphdb.GraphDbModelSet.id'],
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    schema='pl_graphdb'
                    )
    op.create_index('idx_GraphDbVertex_modelSet_key', 'GraphDbVertex',
                    ['modelSetId', 'key'], unique=True, schema='pl_graphdb')
    op.create_index('idx_GraphDbVertex_modelSet_name', 'GraphDbVertex',
                    ['modelSetId', 'name'], unique=True, schema='pl_graphdb')
    op.create_table('SettingProperty',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('settingId', sa.Integer(), nullable=False),
                    sa.Column('key', sa.String(length=50), nullable=False),
                    sa.Column('type', sa.String(length=16), nullable=True),
                    sa.Column('int_value', sa.Integer(), nullable=True),
                    sa.Column('char_value', sa.String(length=50), nullable=True),
                    sa.Column('boolean_value', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(['settingId'], ['pl_graphdb.Setting.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    schema='pl_graphdb'
                    )
    op.create_index('idx_SettingProperty_settingId', 'SettingProperty', ['settingId'],
                    unique=False, schema='pl_graphdb')
    op.create_table('GraphDbEdge',
                    sa.Column('id', sa.Integer(),
                              server_default=nextval("GraphDbEdge_id_seq"),
                              autoincrement=False, nullable=False),
                    sa.Column('modelSetId', sa.Integer(), nullable=False),
                    sa.Column('key', sa.String(length=50), nullable=False),
                    sa.Column('segmentHash', sa.String(length=50), nullable=False),
                    sa.Column('propsJson', sa.String(), nullable=True),
                    sa.Column('srcId', sa.Integer(), nullable=False),
                    sa.Column('dstId', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['dstId'], ['pl_graphdb.GraphDbVertex.id'],
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['modelSetId'],
                                            ['pl_graphdb.GraphDbModelSet.id'],
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['srcId'], ['pl_graphdb.GraphDbVertex.id'],
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    schema='pl_graphdb'
                    )
    op.create_index('idx_GraphDbEdge_importHash', 'GraphDbEdge', ['segmentHash'],
                    unique=False, schema='pl_graphdb')
    op.create_index('idx_GraphDbEdge_modelSet_key', 'GraphDbEdge', ['modelSetId', 'key'],
                    unique=True, schema='pl_graphdb')
    # ### end Alembic commands ###


def downgrade():
    raise NotImplementedError("Downgrade is not implemented")
